import traceback
import os
import csv
import json
import time
from datetime import datetime
from zeep import Client
from zeep.helpers import serialize_object

# ‚úÖ API Credentials
API_KEY = "x35dq92ki47y"
USERNAME = "sergeypersoff@gmail.com"
PASSWORD = "Spinepain1!"
CUSTOMER_KEY = "x35dq92ki47y"
PRACTICE_NAME = "Vivify Medical LLC"

# ‚úÖ SOAP API WSDL URL
WSDL_URL = "https://webservice.kareo.com/services/soap/2.1/KareoServices.svc?singleWsdl"

# ‚úÖ Output File Paths
output_folder = r"C:\Users\serge\Desktop\EDIFY\Python"
os.makedirs(output_folder, exist_ok=True)
csv_file_path = os.path.join(output_folder, "ApptsIns.csv")  # ‚úÖ Updated filename
debug_file_path = os.path.join(output_folder, "api_debug_response.json")

# ‚úÖ Initialize SOAP Client
client = Client(WSDL_URL)

def convert_datetime(obj):
    """Convert datetime objects to string before saving to JSON."""
    if isinstance(obj, datetime):
        return obj.isoformat()
    return obj

def get_appointments():
    """Fetch all appointments for the given date range, ensuring PatientCaseID is included."""
    try:
        # ‚úÖ Create Request Header
        RequestHeader = client.get_type("ns0:RequestHeader")(
            CustomerKey=CUSTOMER_KEY,
            User=USERNAME,
            Password=PASSWORD
        )

        # ‚úÖ Define Date Range (Fetching for entire month)
        start_date_str = "2025-01-01T00:00:00"
        end_date_str = "2025-02-28T23:59:59"

        # ‚úÖ Define API-Approved Fields (Including `PatientCaseID`)
        AppointmentFieldsType = client.get_type("ns0:AppointmentFieldsToReturn")(
            ID=True,
            StartDate=True,
            EndDate=True,
            LastModifiedDate=True,
            PatientFullName=True,
            ConfirmationStatus=True,
            PatientCaseID=True,  # ‚úÖ Fetching Patient Case ID
            ResourceName1=True   # ‚úÖ Fetching Provider Name
        )

        # ‚úÖ Define Filters (Date Range)
        AppointmentFilter = client.get_type("ns0:AppointmentFilter")(
            StartDate=start_date_str,
            EndDate=end_date_str
        )

        print(f"üöÄ Requesting Appointments from {start_date_str} to {end_date_str}...")

        # ‚úÖ Create API Request
        GetAppointmentsReq = client.get_type("ns0:GetAppointmentsReq")(
            RequestHeader=RequestHeader,
            Fields=AppointmentFieldsType,
            Filter=AppointmentFilter
        )

        print("üöÄ Sending API Request...")
        appointment_response = client.service.GetAppointments(GetAppointmentsReq)

        # ‚úÖ Save Full API Response for Debugging
        with open(debug_file_path, "w", encoding="utf-8") as debug_file:
            response_dict = serialize_object(appointment_response)
            json.dump(response_dict, debug_file, indent=4)

        print(f"‚úÖ Debug response saved to: {debug_file_path}")

        # ‚úÖ Return Appointments Data
        if hasattr(appointment_response, "Appointments") and hasattr(appointment_response.Appointments, "AppointmentData"):
            print(f"‚úÖ Retrieved {len(appointment_response.Appointments.AppointmentData)} appointments.")
            return appointment_response.Appointments.AppointmentData

        print("‚ö†Ô∏è No appointments found.")
        return []

    except Exception as e:
        print("\n‚ùå API Request Failed! Error Details:")
        traceback.print_exc()
        return []

def save_appointments_to_csv(data):
    """Append new appointment records to the CSV file while avoiding duplicates."""
    if not data:
        print("‚ÑπÔ∏è No new appointments found. Skipping CSV update.")
        return

    existing_appointments = set()
    if os.path.exists(csv_file_path):
        with open(csv_file_path, mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            next(reader, None)  # Skip the header row
            for row in reader:
                if row:
                    existing_appointments.add(row[0])  # Add Appointment ID to set

    new_entries = []
    for record in data:
        appointment_id = str(getattr(record, "ID", "N/A") or "N/A")
        provider_name = getattr(record, "ResourceName1", "N/A") or "N/A"
        patient_case_id = getattr(record, "PatientCaseID", "N/A") or "N/A"  # ‚úÖ Fetch Patient Case ID

        print(f"üìå Appointment ID: {appointment_id} | PatientCaseID: {patient_case_id} | Provider: {provider_name}")

        if appointment_id not in existing_appointments:
            new_entries.append([
                appointment_id,
                getattr(record, "StartDate", "N/A") or "N/A",
                getattr(record, "EndDate", "N/A") or "N/A",
                getattr(record, "LastModifiedDate", "N/A") or "N/A",
                getattr(record, "PatientFullName", "N/A") or "N/A",
                provider_name,
                getattr(record, "ConfirmationStatus", "N/A") or "N/A",
                patient_case_id  # ‚úÖ Store Patient Case ID in CSV
            ])
            existing_appointments.add(appointment_id)

    if new_entries:
        with open(csv_file_path, mode='a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            if os.stat(csv_file_path).st_size == 0:
                writer.writerow(["Appointment ID", "Start Date", "End Date", "Last Modified Date", "Patient Name", "Provider Name", "Appointment Status", "Patient Case ID"])
            writer.writerows(new_entries)

        print(f"‚úÖ {len(new_entries)} new appointment(s) appended to {csv_file_path}")
    else:
        print("‚ÑπÔ∏è No new unique appointments to add.")

if __name__ == "__main__":
    while True:
        print("=== Fetching Appointments (Updates Every 2 Hours) ===")
        appointments = get_appointments()
        save_appointments_to_csv(appointments)
        print("=== Process Completed. Waiting for next update... ===")
        time.sleep(7200)  # ‚è≥ Wait for next update
