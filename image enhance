import os
import cv2
import numpy as np
from pathlib import Path

# Image paths
source_dir = Path("C:/Users/serge/Desktop/EDIFY/")  
dest_dir = Path("C:/Users/serge/Desktop/EDIFY/Pics")
dest_dir.mkdir(parents=True, exist_ok=True)


def enhance_portrait(src_path, dest_path):
    # Load image
    image = cv2.imread(str(src_path))  # Use src_path, not image_path

    # Convert to RGB (OpenCV loads images in BGR)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Use OpenCV's built-in face detector
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(image, 1.3, 5)

    # If a face is detected
    if len(faces) == 1:
        (x,y,w,h) = faces[0]
        center = (x + w//2, y + h//2)
        mask = np.zeros(image.shape[:2], np.uint8)
        mask = cv2.ellipse(mask, center, (w//2, h//2), 0, 0, 360, 255, -1)
        # Create a blurred version of the image
        blurred = cv2.GaussianBlur(image, (50,50), 0)
        # Merge the blurred background with the unblurred face
        blended = cv2.bitwise_and(image, image, mask=mask)
        mask_inv = cv2.bitwise_not(mask)
        background = cv2.bitwise_and(blurred, blurred, mask=mask_inv)
        enhanced_image = cv2.add(blended, background)

    else:  # If no face is detected, just return the original
        enhanced_image = image

    # Convert back to BGR for saving with OpenCV
    enhanced_image = cv2.cvtColor(enhanced_image, cv2.COLOR_RGB2BGR)

    # Save the result
    cv2.imwrite(str(dest_path), enhanced_image)

#  Process each image in the source directory
for img_file in os.listdir(source_dir):
    if img_file.lower().endswith(('.png', '.jpg', '.jpeg')):
        src_path = source_dir / img_file
        dest_path = dest_dir / img_file
        enhance_portrait(src_path, dest_path)